#!/bin/bash

VERSION="0.0.3"

WEBMVC=false
WEBFLUX=false
JDBC=""
DEPENDENCIES="actuator"
SERVICE_TYPE="ClusterIP"
SERVICE=""
TYPE=""
USER=""
DATABASE=""

function print_usage() {
cat <<EOF
springapp is for Spring Boot Applications on Kubernetes
version $VERSION

Commands:
  init         Initialize a Spring Boot Application project
  bind         Bind a service to a Spring Boot Application
  build        Build a Spring Boot Application container
  run          Run a Spring Boot Application container on Kubernetes
  delete       Delete a Spring Boot Application from Kubernetes

All commands take the project name (which also is the relative path) 
as the first and only argument.

The 'init' command has the following options:

  --web                        Use the 'web' dependency (default)
  --webflux                    Use the 'webflux' dependency
  --jdbc-driver {driver-name}  Add 'jdbc' and the driver dependencies
  --service-type {type}        Expose the service using the type (default is ClusterIP)

The 'bind' command has the following options:

  --name                       The name of the service to bind
  --user                       Username for login (defaults to database type default)
  --database                   Database name (defaults to database type default)

EOF
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

function init() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ -d $NAME ]]; then
    echo "ERROR: the $NAME project already exists"
    exit 1
  fi
  if [[ "$WEBMVC" = true ]]; then
    if [[ "$WEBFLUX" = true ]]; then
      echo "ERROR: only one of '--web' and '--webflux' options can be specified"
      exit 1
   else
      DEPENDENCIES="${DEPENDENCIES},web"
    fi
  else
    if [[ "$WEBFLUX" = true ]]; then
      DEPENDENCIES="${DEPENDENCIES},webflux"
    else
      DEPENDENCIES="${DEPENDENCIES},web"
    fi
  fi
  if [[ $JDBC > "" ]]; then
    DEPENDENCIES="${DEPENDENCIES},jdbc,$JDBC"
  fi

  # start.spring.io
  curl https://start.spring.io/starter.tgz \
   -d dependencies=$DEPENDENCIES \
   -d language=java \
   -d javaVersion=11 \
   -d bootVersion=2.2.6.RELEASE \
   -d type=maven-project \
   -d groupId=com.example \
   -d artifactId=$NAME \
   -d name=$NAME \
   -d packageName=com.example.$NAME \
   -d baseDir=$NAME | tar -xzvf -

  # add controller
  pushd $PWD
  cd $NAME/src/main/java/com/example/${NAME//-}
  main=$(ls)
  len=$(expr length "$NAME")
  prefix=${main:0:$len}
cat <<EOF > ${prefix}Controller.java
package com.example.$NAME;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class ${prefix}Controller {

    @RequestMapping("/")
    public String index() {
        return "Hello!";
	  }
}
EOF
  popd

  # springbootapplication
cat <<EOF > $NAME/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $NAME
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: $NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $NAME
    spec:
      containers:
      - name: application
        image: $NAME
        resources:
          requests:
            memory: 1Gi
          limits:
            memory: 1Gi
EOF

  # service
cat <<EOF > $NAME/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: $NAME
spec:
  type: $SERVICE_TYPE
  selector:
    app.kubernetes.io/name: $NAME
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
EOF

  # skaffold
  cd $NAME
  skaffold init --skip-build --force=true
  mv ./skaffold.yaml ./skaffold.yaml.tmp
  sed "s/deploy:/build:+  local:+    push: true+  artifacts:+    - image: $NAME+      buildpacks:+        builder: 'paketobuildpacks\/builder:bionic'+  tagPolicy:+    sha256: {}+deploy:/" ./skaffold.yaml.tmp | tr '+' '\n' > ./skaffold.yaml
  rm ./skaffold.yaml.tmp
  cd ..

  echo "You can edit the code using 'code $NAME $NAME/src/main/java/com/example/${NAME}/${prefix}Controller.java'"
}  

function bind() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  if [[ $SERVICE == "" ]]; then
    echo "ERROR: service name must be specified using '--name' option"
    exit 1
  fi
  IFS='-' read -a parts <<< $SERVICE
  if [[ "${#parts[*]}" > "1" ]]; then
    TYPE=${parts[1]}
  else
    echo "ERROR: service type must be last part of service name: $SERVICE"
    exit 1
  fi
  # look for volumeMounts
  vm_defined=$(grep -i 'volumeMount' $NAME/deployment.yaml --count)
  if [[ $vm_defined > 0 ]]; then
    echo "ERROR: Only one service binding is currently supported"
    exit 1
  fi
  if [[ $TYPE == "mysql" ]]; then
    if [[ $USER == "" ]]; then
      USER="root"
    fi
    if [[ $USER == "root" ]]; then
      pwd_path="mysql-root-password"
    else
      pwd_path="mysql-password"
    fi
    if [[ $DATABASE == "" ]]; then
      DATABASE="my_database"
    fi
    db_port="3306"
  elif [[ $TYPE == "postgresql" ]]; then
    if [[ $USER == "" ]]; then
      USER="postgres"
    fi
    if [[ $DATABASE == "" ]]; then
      DATABASE="postgres"
    fi
    pwd_path="postgresql-password"
    db_port="5432"
  else
    echo "ERROR: $TYPE is not a supported service type"
    exit 1
  fi  
  db_pwd=$(kubectl get secret $SERVICE -ojsonpath="{.data.${pwd_path}}" | base64 -d)
  yaml="spring:
  datasource:
    url: \"jdbc:$TYPE://$SERVICE:$db_port/$DATABASE\"
    username: $USER
    password: $db_pwd
  "
  echo "binding $SERVICE service for user $USER"
  kubectl create secret generic $SERVICE-binding --from-literal config.yaml="$yaml"
  # springbootapplication
cat <<EOF >> $NAME/deployment.yaml
        volumeMounts:
        - mountPath: /workspace/config
          name: $SERVICE-binding
          readOnly: true
      volumes:
      - name: $SERVICE-binding
        secret:
          defaultmode: 420
          items:
          - key: config.yaml
            path: application.yaml
          secretName: $SERVICE-binding
          type: array
EOF
}  

function build() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  pushd $PWD
  cd $NAME
  skaffold build
  popd
}  

function run() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  pushd $PWD
  cd $NAME
  skaffold run
  popd
}  

function delete() {
  if [[ $NAME == "" ]]; then
    echo "ERROR: project name must be specified"
    exit 1
  fi
  if [[ ! -d $NAME ]]; then
    echo "ERROR: can not find the $NAME project"
    exit 1
  fi
  pushd $PWD
  cd $NAME
  skaffold delete
  popd
}  

if [[ $1 == "--help" || $1 == "-h" ]] ; then
    print_usage
    exit 0
fi

if [[ $# == 0 ]]; then
  print_usage
  exit 0
fi

COMMAND="$1"
shift

# ARGS #
while [[ $# > 0 ]]
do
  if [[ $1 == -* ]]; then
    key="$1"
    case ${key} in
      --web)
        WEBMVC=true
      ;;
      --webflux)
        WEBFLUX=true
      ;;
      --jdbc-driver)
        JDBC=$2
      shift
      ;;
      --name)
        SERVICE=$2
      shift
      ;;
      --user)
        USER=$2
      shift
      ;;
      --database)
        DATABASE=$2
      shift
      ;;
      --service-type)
        if [[ $2 = "ClusterIP" || $2 = "NodePort" || $2 = "LoadBalancer" ]]; then
          SERVICE_TYPE=$2
        else
          echo "ERROR: Invalid service-type: $2"
          exit 1
        fi
      shift
      ;;
      *)
      echo "ERROR: Invalid option: [$1]"
      exit 1
      ;;
    esac
    shift
  else
    if [[ $NAME = "" ]]; then
      NAME="$1"
      shift
    else
      echo "ERROR: Invalid argument: [$1]"
      exit 1
    fi
  fi
done

# COMMANDS #

if [[ "${COMMAND}" == "init" ]]; then
  init
elif [[ "${COMMAND}" == "bind" ]]; then
  bind
elif [[ "${COMMAND}" == "build" ]]; then
  build
elif [[ "${COMMAND}" == "run" ]]; then
  run
elif [[ "${COMMAND}" == "delete" ]]; then
  delete
else
  echo "$COMMAND is an invalid command"
  exit 1;
fi
